//===- rvexRegisterInfo.td - rvex Register defs --------*- tablegen -*-===//
// 
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
// 
//===----------------------------------------------------------------------===//
//
//                               rvex Backend
//
// Author: David Juhasz
// E-mail: juhda@caesar.elte.hu
// Institute: Dept. of Programming Languages and Compilers, ELTE IK, Hungary
//
// The research is supported by the European Union and co-financed by the
// European Social Fund (grant agreement no. TAMOP
// 4.2.1./B-09/1/KMR-2010-0003).
//
//
//  Declarations that describe the rvex register file.
//
//  NOTE: SPRs are not mentioned in this definition. 
//===----------------------------------------------------------------------===//


class rvexReg<string n> : Register<n> {
  let Namespace = "T64";
}

class rvexBranchReg<string n> : Register<n> {
    let Namespace = "T64";
}

//===----------------------------------------------------------------------===//
// Define registers
//===----------------------------------------------------------------------===//

//General purpose registers
def R0 : rvexReg<"$r0.0">, DwarfRegNum<[0]>;     
//def R1 : rvexReg<"$r0.1">, DwarfRegNum<[1]>;    
def R2 : rvexReg<"$r0.2">, DwarfRegNum<[2]>;
def R3 : rvexReg<"$r0.3">, DwarfRegNum<[3]>;
def R4 : rvexReg<"$r0.4">, DwarfRegNum<[4]>;
def R5 : rvexReg<"$r0.5">, DwarfRegNum<[5]>;
def R6 : rvexReg<"$r0.6">, DwarfRegNum<[6]>;
def R7 : rvexReg<"$r0.7">, DwarfRegNum<[7]>;
def R8 : rvexReg<"$r0.8">, DwarfRegNum<[8]>;
def R9 : rvexReg<"$r0.9">, DwarfRegNum<[9]>;
def R10 : rvexReg<"$r0.10">, DwarfRegNum<[10]>;
def R11 : rvexReg<"$r0.11">, DwarfRegNum<[11]>;
def R12 : rvexReg<"$r0.12">, DwarfRegNum<[12]>;
def R13 : rvexReg<"$r0.13">, DwarfRegNum<[13]>;
def R14 : rvexReg<"$r0.14">, DwarfRegNum<[14]>;
def R15 : rvexReg<"$r0.15">, DwarfRegNum<[15]>;
def R16 : rvexReg<"$r0.16">, DwarfRegNum<[16]>;
def R17 : rvexReg<"$r0.17">, DwarfRegNum<[17]>;
def R18 : rvexReg<"$r0.18">, DwarfRegNum<[18]>;
def R19 : rvexReg<"$r0.19">, DwarfRegNum<[19]>;
def R20 : rvexReg<"$r0.20">, DwarfRegNum<[20]>;
def R21 : rvexReg<"$r0.21">, DwarfRegNum<[21]>;
def R22 : rvexReg<"$r0.22">, DwarfRegNum<[22]>;
def R23 : rvexReg<"$r0.23">, DwarfRegNum<[23]>;
def R24 : rvexReg<"$r0.24">, DwarfRegNum<[24]>;
def R25 : rvexReg<"$r0.25">, DwarfRegNum<[25]>;
def R26 : rvexReg<"$r0.26">, DwarfRegNum<[26]>;
def R27 : rvexReg<"$r0.27">, DwarfRegNum<[27]>;
def R28 : rvexReg<"$r0.28">, DwarfRegNum<[28]>;
def R29 : rvexReg<"$r0.29">, DwarfRegNum<[29]>;
def R30 : rvexReg<"$r0.30">, DwarfRegNum<[30]>;
def R31 : rvexReg<"$r0.31">, DwarfRegNum<[31]>;
def R32 : rvexReg<"$r0.32">, DwarfRegNum<[32]>;
def R33 : rvexReg<"$r0.33">, DwarfRegNum<[33]>;
def R34 : rvexReg<"$r0.34">, DwarfRegNum<[34]>;
def R35 : rvexReg<"$r0.35">, DwarfRegNum<[35]>;
def R36 : rvexReg<"$r0.36">, DwarfRegNum<[36]>;
def R37 : rvexReg<"$r0.37">, DwarfRegNum<[37]>;
def R38 : rvexReg<"$r0.38">, DwarfRegNum<[38]>;
def R39 : rvexReg<"$r0.39">, DwarfRegNum<[39]>;
def R40 : rvexReg<"$r0.40">, DwarfRegNum<[40]>;
def R41 : rvexReg<"$r0.41">, DwarfRegNum<[41]>;
def R42 : rvexReg<"$r0.42">, DwarfRegNum<[42]>;
def R43 : rvexReg<"$r0.43">, DwarfRegNum<[43]>;
def R44 : rvexReg<"$r0.44">, DwarfRegNum<[44]>;
def R45 : rvexReg<"$r0.45">, DwarfRegNum<[45]>;
def R46 : rvexReg<"$r0.46">, DwarfRegNum<[46]>;
def R47 : rvexReg<"$r0.47">, DwarfRegNum<[47]>;
def R48 : rvexReg<"$r0.48">, DwarfRegNum<[48]>;
def R49 : rvexReg<"$r0.49">, DwarfRegNum<[49]>;
def R50 : rvexReg<"$r0.50">, DwarfRegNum<[50]>;
def R51 : rvexReg<"$r0.51">, DwarfRegNum<[51]>;
def R52 : rvexReg<"$r0.52">, DwarfRegNum<[52]>;
def R53 : rvexReg<"$r0.53">, DwarfRegNum<[53]>;
def R54 : rvexReg<"$r0.54">, DwarfRegNum<[54]>;
def R55 : rvexReg<"$r0.55">, DwarfRegNum<[55]>;
def R56 : rvexReg<"$r0.56">, DwarfRegNum<[56]>;
def R57 : rvexReg<"$r0.57">, DwarfRegNum<[57]>;
def R58 : rvexReg<"$r0.58">, DwarfRegNum<[58]>;
def R59 : rvexReg<"$r0.59">, DwarfRegNum<[59]>;
def R60 : rvexReg<"$r0.60">, DwarfRegNum<[60]>;
def R61 : rvexReg<"$r0.61">, DwarfRegNum<[61]>;
def R62 : rvexReg<"$r0.62">, DwarfRegNum<[62]>;
def R63 : rvexReg<"$r0.63">, DwarfRegNum<[63]>;
def R64 : rvexReg<"$r0.64">, DwarfRegNum<[64]>;

def B0 : rvexBranchReg<"$b0.0">, DwarfRegNum<[65]>;
def B1 : rvexBranchReg<"$b0.1">, DwarfRegNum<[66]>;
def B2 : rvexBranchReg<"$b0.2">, DwarfRegNum<[67]>;
def B3 : rvexBranchReg<"$b0.3">, DwarfRegNum<[68]>;
def B4 : rvexBranchReg<"$b0.4">, DwarfRegNum<[69]>;
def B5 : rvexBranchReg<"$b0.5">, DwarfRegNum<[70]>;
def B6 : rvexBranchReg<"$b0.6">, DwarfRegNum<[71]>;
def B7 : rvexBranchReg<"$b0.7">, DwarfRegNum<[72]>;


//Specially handled general purpose registers
// Moeten verwijdert worden
//def FramePointer : rvexReg<"$r0.65">;
def ThreadLocalData : rvexReg<"tp">, DwarfRegNum<[73]>;
def StackPointer : rvexReg<"$r0.1">, DwarfRegNum<[1]>;
def LinkRegister : rvexReg<"$l0.0">, DwarfRegNum<[74]>;

//General purpose registers for on-card networking
def SN : rvexReg<"sn">, DwarfRegNum<[75]>;
def IDN0 : rvexReg<"idn0">, DwarfRegNum<[76]>;
def IDN1 : rvexReg<"idn1">, DwarfRegNum<[77]>;
def UDN0 : rvexReg<"udn0">, DwarfRegNum<[78]>;
def UDN1 : rvexReg<"udn1">, DwarfRegNum<[79]>;
def UDN2 : rvexReg<"udn2">, DwarfRegNum<[80]>;
def UDN3 : rvexReg<"udn3">, DwarfRegNum<[81]>;

//Zero register
def Zero : rvexReg<"zero">, DwarfRegNum<[82]>;


//===----------------------------------------------------------------------===//
// Define RegisterClass
//===----------------------------------------------------------------------===//

def T64GPRF : RegisterClass<"T64", [i32, v2i16, v4i8], 32,
                            (add
                                 (sequence "R%u", 2, 64),
                            //     FramePointer,
                                 ThreadLocalData,
                                 StackPointer,
                                 LinkRegister,
                                 SN,
                                 (sequence "IDN%u", 0, 1),
                                 (sequence "UDN%u", 0, 3),
                                 Zero
                            )>;



